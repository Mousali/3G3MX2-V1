#!/usr/bin/env sh
/*** 2>/dev/null
DOCKER_IMAGE=swipl:9.3.23
DOCKER_CMD="/usr/bin/swipl -q"
DOCKER_EXTRA_ARGS="-w $(pwd) -u $(id -u):$(id -g) -v $(pwd):$(pwd):rw"
s="$(cd "$(dirname "$0")" && pwd)/$(basename "$0")";docker run --rm -a stdin -a stdout -a stderr -i$([ -t 0 ] && echo t) --init -v "$s":"$s":ro ${DOCKER_EXTRA_ARGS} ${DOCKER_IMAGE} ${DOCKER_CMD} "$s" "$@";exit $?
***/

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% vfdparam  -   Calculate VFD parameter values given a VFD and motor 
%               specification YAML file. 
%  
% USAGE:
%   vfdparam.pl [--calculated-only] SPEC_FILENAME
%
% OPTIONS:
%   --calculated-only  -c  boolean=false    Print calculated parameter values only
%   --output-file      -o  FILE:atom=false  write output to FILE
%   --help             -h  boolean=false    Show this help message
%
% INPUT:
%   Specification YAML string from stdin or specification YAML filename.
%
% OUTPUT:
%   Prints VDF parameter values to stdout or output file.
%
% EXIT STATUS:
%   - 0: Success
%   - 1: File error or invalid YAML
%
% AUTHOR:
%   Ammar Mousali
%
% LICENSE:
%   GNU AFFERO GENERAL PUBLIC LICENSE
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

:- use_module(library(readutil)).
:- use_module(library(optparse)).

:- consult("param/group_a").
:- consult("param/group_b").
:- consult("param/group_c").
:- consult("param/group_d").
:- consult("param/group_f").
:- consult("param/group_h").
:- consult("param/group_p").
:- consult("param/group_u").

:- initialization(main, main).

read_specs([], Str):-
    read_string(user_input,_,Str).
read_specs([H|[]], Str):- 
    read_file_to_string(H, Str, []).
read_specs([H|T], Str):- 
    read_file_to_string(H, StrH, []),
    read_specs(T, StrT),
    string_concat(StrH, "\n\n", StrHH),
    string_concat(StrHH, StrT, Str).

main(Args):-
    OptsSpec=[
        [opt(calculated_only), type(boolean), default(false),shortflags([c]), longflags(['calculated-only']),help('Print calculated parameter values only')], 
        [opt(help), type(boolean), shortflags([h]), longflags([help]), help('Show this help message'), default(false)],
        [opt(outfile), meta('FILE'), type(atom), shortflags([o]), longflags(['output-file']),help('write output to FILE'), default(std_out)]
    ],
    opt_parse( OptsSpec, Args, Ops, PositionalArgs),

    (
        Ops.help == true ->
        (
            opt_help(OptsSpec, Help),
            format('USAGE:~n~+vfdparam [OPTION]... [SPEC_YAML_FILENAME]~n~nCalculate Omron VFD configuration parameters from YAML VFD and motor specification file.~n~nOPTIONS:~n~w~n', [Help]),
            halt(0)
        ); true
    ),
    
    % read all spec files
    read_specs(PositionalArgs, Str),
    yaml_read(string(Str), Yaml_spec),
    b_setval(spec, Yaml_spec),

    (
        Ops.outfile \= std_out ->  
        (
            open(Ops.outfile, write, Out),
            set_output(Out)
        ); true
    ),

    findall(Name, 
    ( 
        current_predicate(Name/2),
        re_match("^[a,b,c,d,f,h,p,u]\\d{3}$",Name)
    ), Params),
    sort(Params, UniqueParams),

    findall([Param, Value], 
    (
        member(Param, UniqueParams), 

        call(Param,Value, Msg),
        
        (
            Ops.calculated_only ->
            Msg \= default ; 
            true
        ),

        string_upper(Param,Uppercase_Param), 
        format('~w: ~|~` t~w~6+ # ~w~n', [Uppercase_Param,Value, Msg])
    ), _),

    halt(0).